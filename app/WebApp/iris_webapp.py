# -*- coding: utf-8 -*-
"""Iris_WebApp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OS_7witVGRlBJhwzKp-dgqkdLNfQlKmZ
"""

# CÃ i Ä‘áº·t thÆ° viá»‡n
!pip install fastapi uvicorn nest-asyncio pyngrok kagglehub streamlit requests > /dev/null

import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
import joblib
import kagglehub
from fastapi import FastAPI
from pydantic import BaseModel, confloat
import threading
import nest_asyncio
import uvicorn
from pyngrok import ngrok
import time
import os
os.system("killall ngrok || true")

# ------------------------------------------
# Huáº¥n luyá»‡n vÃ  lÆ°u mÃ´ hÃ¬nh
path = kagglehub.dataset_download("uciml/iris")
csv_path = os.path.join(path, "Iris.csv")
df = pd.read_csv(csv_path)

X = df.drop(columns=["Id", "Species"])
y = df["Species"]
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)
joblib.dump(knn, "knn_model.pkl")

model = joblib.load("knn_model.pkl")
classes = model.classes_

# ------------------------------------------
# FASTAPI
app = FastAPI()

class IrisInput(BaseModel):
    SepalLengthCm: confloat(ge=4.3, le=7.9)
    SepalWidthCm: confloat(ge=2.0, le=4.4)
    PetalLengthCm: confloat(ge=1.0, le=6.9)
    PetalWidthCm: confloat(ge=0.1, le=2.5)

@app.post("/predict")
def predict(data: IrisInput):
    df = pd.DataFrame([data.dict()])
    pred = model.predict(df)[0]
    probas = model.predict_proba(df)[0]
    proba_dict = dict(zip(classes, [round(float(p), 3) for p in probas]))
    return {"prediction": pred, "probabilities": proba_dict}

# ------------------------------------------
# Táº¡o file Streamlit
streamlit_code = '''
import streamlit as st
import requests

with open("api_url.txt") as f:
    API_URL = f.read().strip() + "/predict"

st.title("Dá»± Ä‘oÃ¡n Hoa Iris")
st.write("Nháº­p cÃ¡c thÃ´ng sá»‘ rá»“i báº¥m **Dá»± Ä‘oÃ¡n**")

sl = st.number_input("Sepal Length (cm) (4.3â€“7.9)", min_value=4.3, max_value=7.9, value=5.1)
sw = st.number_input("Sepal Width (cm) (2.0â€“4.4)", min_value=2.0, max_value=4.4, value=3.5)
pl = st.number_input("Petal Length (cm) (1.0â€“6.9)", min_value=1.0, max_value=6.9, value=1.4)
pw = st.number_input("Petal Width (cm) (0.1â€“2.5)", min_value=0.1, max_value=2.5, value=0.2)

if st.button("Dá»± Ä‘oÃ¡n"):
    data = {
        "SepalLengthCm": sl,
        "SepalWidthCm": sw,
        "PetalLengthCm": pl,
        "PetalWidthCm": pw
    }
    st.write(f"ðŸ“¡ Gá»­i Ä‘áº¿n API: `{API_URL}` â€¦")
    res = requests.post(API_URL, json=data)
    if res.status_code == 200:
        r = res.json()
        st.success(f"LoÃ i dá»± Ä‘oÃ¡n: **{r['prediction']}**")
        st.write("Má»©c Ä‘á»™ tá»± tin cá»§a mÃ´ hÃ¬nh:")
        probas = r["probabilities"]
        # Hiá»ƒn thá»‹ tá»«ng dÃ²ng
        for cls, prob in sorted(probas.items(), key=lambda x: -x[1]):
            pct = int(round(prob * 100))
            st.write(f"MÃ´ hÃ¬nh tá»± tin **{pct}%** lÃ  loÃ i **{cls}**")
    else:
        st.error(f"Lá»—i: {res.status_code}")
'''

with open("iris_app.py", "w") as f:
    f.write(streamlit_code)

# ------------------------------------------
# Cháº¡y song song
def run_api():
    nest_asyncio.apply()
    uvicorn.run(app, host="0.0.0.0", port=8000)

def run_streamlit():
    os.system("streamlit run iris_app.py &")

# Má»Ÿ ngrok cho FastAPI
ngrok.set_auth_token("2zS1ix1LExFP3PbwbOb4zUtovvE_7TmYVGJoGxEp5xCUsD9rA")
api_tunnel = ngrok.connect(8000)
api_url = api_tunnel.public_url
with open("api_url.txt", "w") as f:
    f.write(api_url)

# Má»Ÿ ngrok cho Streamlit
streamlit_tunnel = ngrok.connect(8501)
streamlit_url = streamlit_tunnel.public_url

# Cháº¡y API + Streamlit
threading.Thread(target=run_api).start()
time.sleep(5)  # Ä‘á»£i API lÃªn
threading.Thread(target=run_streamlit).start()
time.sleep(10)  # Ä‘á»£i Streamlit lÃªn

print("API URL: ", api_url + "/docs")
print("Giao diá»‡n Web: ", streamlit_url)